linters-settings:
  funlen:
    lines: 150
    statements: 50
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - whyNoLint
  gocyclo:
    min-complexity: 15
  lll:
    line-length: 100
    tab-width: 4
  stylecheck:
    checks:
      - "-ST1000"

linters:
  enable:
    - asciicheck
    - bodyclose
    - decorder
    - dogsled
    - dupl
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - exhaustive
    - exportloopref
    - forbidigo
    - forcetypeassert
    - funlen
    - gocheckcompilerdirectives
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goimports
    - gomnd
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - grouper
    - importas
    - ineffassign
    - lll
    - maintidx
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nlreturn
    - noctx
    - nolintlint
    - nolintlint
    - prealloc
    - predeclared
    - reassign
    - revive
    - staticcheck
    - stylecheck
    - tenv
    - testpackage
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - wastedassign
    - whitespace
    - wsl

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  # https://github.com/golangci/golangci-lint/issues/2439#issuecomment-1002912465
  exclude-use-default: false
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - dupl
        - structcheck
        - unused
        - unparam

    # ignoring long lines due to json/yaml tags in platform
    - path: platform/definition.go
      linters:
        - lll

    # ignore package comments complaints in revive
    - linters:
        - revive
      text: "package-comments"

run:
  go: '1.21'
  skip-dirs:
    - private

output:
  uniq-by-line: false

service:
  golangci-lint-version: 1.54.x
